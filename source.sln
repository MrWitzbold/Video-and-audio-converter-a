using System;
using System.ComponentModel;
using System.Windows.Forms;
using System.Net;
using System.IO.Compression;
using System.IO;
using Microsoft.WindowsAPICodePack.Dialogs;
using System.Security.Cryptography;
using DidiSoft.Pgp;
using System.Diagnostics;
using Microsoft.VisualBasic;
using CliWrap;
using System.Collections.Generic;
using static Microsoft.WindowsAPICodePack.Shell.PropertySystem.SystemProperties.System;
using Shell32;

namespace Free_video_quality_converter
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void flatButton1_Click(object sender, EventArgs e)
        {
            this.logging_textbox.Text = "Downloading contents, please wait!";
            this.backgroundWorker1.RunWorkerAsync();
            while (this.backgroundWorker1.IsBusy) 
            {
                Application.DoEvents();
            }
            this.logging_textbox.Text = "Finished, now installing...";
            string source_folder = @"C:/Users/" + Environment.UserName + "/unzipped";
            string target_file = @"C:/Users/" + Environment.UserName + "/ffmpeg-N-103439-ge07ada3dac-win64-gpl.zip";
            ZipFile.ExtractToDirectory(target_file, source_folder);

            string bin_folder_path = @"C:/Users/" + Environment.UserName + "/unzipped/ffmpeg-N-103439-ge07ada3dac-win64-gpl/bin";
            Environment.SetEnvironmentVariable("Path", bin_folder_path, EnvironmentVariableTarget.Machine);
            this.logging_textbox.Text = "Finished, you can use it now.";
        }

        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)
        {
            using (WebClient client = new WebClient())
            {
                string URL = "https://github.com/BtbN/FFmpeg-Builds/releases/download/autobuild-2021-08-29-12-21/ffmpeg-N-103439-ge07ada3dac-win64-gpl.zip";
                string path = @"C:/Users/" + Environment.UserName + "/ffmpeg-N-103439-ge07ada3dac-win64-gpl.zip";
                try
                {
                    client.DownloadFile(URL, path);
                }
                catch (InvalidCastException baddest)
                {
                    Console.WriteLine(Convert.ToString(baddest));
                }
            }
        }

        private void flatButton3_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void flatButton4_Click(object sender, EventArgs e)
        {
            this.WindowState = FormWindowState.Minimized;
        }

        private void use_custom_format_checkbox_CheckedChanged(object sender)
        {
            if(this.use_custom_format_checkbox.Checked == true) 
            {
                this.video_format_combo_box.Visible = false;
            }
            else
            {
                this.video_format_combo_box.Visible = true;
            }
        }

        private void flatButton2_Click(object sender, EventArgs e)
        {
            string target_format = null;
            if(this.use_custom_format_checkbox.Checked == true) 
            {
                target_format = this.custom_format_textbox.Text;
            }
            else 
            {
                target_format = this.video_format_combo_box.Text;
            }
            string source_video_path = video_file_path_textbox.Text;
            int random_number = new Random().Next(1, 9999);
            string id = Convert.ToString(random_number);
            string target_file_name_and_path = output_folder_textbox.Text + "/converted_" + id + "." + target_format;

            string command = "-i " + source_video_path + " " + target_file_name_and_path + "";
            Console.WriteLine(command);

            Process proc = new Process();
            proc.StartInfo.FileName = "C:/Users/" + Environment.UserName + "/unzipped/ffmpeg-N-103439-ge07ada3dac-win64-gpl/bin/ffmpeg.exe";
            proc.StartInfo.Arguments = command;
            proc.StartInfo.RedirectStandardError = true;
            proc.StartInfo.UseShellExecute = false;
            if (!proc.Start())
            {
                Console.WriteLine("Error starting");
                return;
            }
            StreamReader reader = proc.StandardError;
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                logging_textbox.Text = line;
                Application.DoEvents();
            }
            proc.Close();
        }

        private void tabPage1_Click(object sender, EventArgs e)
        {

        }

        private void flatButton5_Click(object sender, EventArgs e)
        {
            PGPLib pgp = new PGPLib();
            OpenFileDialog dialog = new OpenFileDialog();
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                Console.WriteLine("OK");
                Console.WriteLine(dialog.FileName);
                video_format_combo_box.Text = dialog.FileName;
                video_file_path_textbox.Text = dialog.FileName;
            }
        }

        private void flatButton6_Click(object sender, EventArgs e)
        {
            CommonOpenFileDialog dialog = new CommonOpenFileDialog();
            dialog.IsFolderPicker = true;
            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
               output_folder_textbox.Text = dialog.FileName;
            }
        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void quality_use_custom_format_checkbox_CheckedChanged(object sender)
        {
            if(this.quality_use_custom_format_checkbox.Checked == true) 
            {
                quality_video_format_combobox.Visible = false;
            }
            else
            {
                quality_video_format_combobox.Visible = true;
            }
        }

        private void quality_select_video_file_Click(object sender, EventArgs e)
        {
            PGPLib pgp = new PGPLib();
            OpenFileDialog dialog = new OpenFileDialog();
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                Console.WriteLine("OK");
                Console.WriteLine(dialog.FileName);
                this. quality_video_file_path.Text = dialog.FileName;
            }
        }

        private void quality_select_output_folder_Click(object sender, EventArgs e)
        {
            CommonOpenFileDialog dialog = new CommonOpenFileDialog();
            dialog.IsFolderPicker = true;
            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
                quality_output_folder.Text = dialog.FileName;
            }
        }

        

        private void flatButton9_Click(object sender, EventArgs e)
        {
            string target_format = null;
            if (this.quality_use_custom_format_checkbox.Checked == true)
            {
                target_format = this.quality_custom_video_format_textbox.Text;
            }
            else
            {
                target_format = this.quality_video_format_combobox.Text;
            }
            string source_video_path = this.quality_video_file_path.Text;
            int random_number = new Random().Next(1, 9999);
            string id = Convert.ToString(random_number);
            string target_file_name_and_path = this.quality_output_folder.Text + "/converted_" + id + "." + target_format;
            //ffmpeg -i MyMovie.mkv -vf scale=-1:720 -c:v libx264 -crf 0 -preset veryslow -c:a copy MyMovie_720p.mkv
            string preset = this.quality_speed_combobox.Text;
            //pad=width=1280:height=720
            string width = this.quality_selection_combobox.Text.Split(':')[0];
            string height = this.quality_selection_combobox.Text.Split(':')[1];
            string scale = this.quality_selection_combobox.Text;
            string command = "-i " + source_video_path + " -vf scale=" + scale + " -c:v libx264 -crf 18 -preset " + this.quality_speed_combobox.Text + " -c:a copy " + target_file_name_and_path;
            Console.WriteLine(command);

            Process proc = new Process();
            proc.StartInfo.FileName = "C:/Users/" + Environment.UserName + "/unzipped/ffmpeg-N-103439-ge07ada3dac-win64-gpl/bin/ffmpeg.exe";
            proc.StartInfo.Arguments = command;
            proc.StartInfo.RedirectStandardError = true;
            proc.StartInfo.UseShellExecute = false;
            if (!proc.Start())
            {
                Console.WriteLine("Error starting");
                return;
            }
            StreamReader reader = proc.StandardError;
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                logging_textbox.Text = line;
                Application.DoEvents();
            }
            proc.Close();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Process.Start("https://discord.gg/4jFcGAaq2T");
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Process.Start("https://www.youtube.com/channel/UCKydSKcJlBzXSBvuov52O3g");
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Process.Start("https://github.com/MrWitzbold");
        }

        private void flatLabel5_Click(object sender, EventArgs e)
        {

        }

        private void flatComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void audio_use_custom_format_checkbox_CheckedChanged(object sender)
        {
            if(this.audio_use_custom_format_checkbox.Checked == true) 
            {
                this.audio_formats_combobox.Visible = false;
            }
            else
            {
                this.audio_formats_combobox.Visible = true;
            }
        }

        private void flatButton10_Click(object sender, EventArgs e)
        {
            PGPLib pgp = new PGPLib();
            OpenFileDialog dialog = new OpenFileDialog();
            if (dialog.ShowDialog() == DialogResult.OK)
            {
                Console.WriteLine("OK");
                Console.WriteLine(dialog.FileName);
                this.source_audio_path_textbox.Text = dialog.FileName;
            }
        }

        private void flatButton7_Click(object sender, EventArgs e)
        {
            CommonOpenFileDialog dialog = new CommonOpenFileDialog();
            dialog.IsFolderPicker = true;
            if (dialog.ShowDialog() == CommonFileDialogResult.Ok)
            {
                this.audio_target_folder_path_textbox.Text = dialog.FileName;
            }
        }

        private void flatButton8_Click(object sender, EventArgs e)
        {
            string target_format = null;
            if (this.audio_use_custom_format_checkbox.Checked == true)
            {
                target_format = this.custom_format_textbox.Text;
            }
            else
            {
                target_format = this.audio_formats_combobox.Text;
            }
            string source_video_path = this.source_audio_path_textbox.Text;
            int random_number = new Random().Next(1, 9999);
            string id = Convert.ToString(random_number);
            string target_file_name_and_path = this.audio_target_folder_path_textbox.Text + "/converted_" + id + "." + target_format;
            //ffmpeg -i input.wmv -preset fast output.mp4
            string preset = this.quality_speed_combobox.Text;
            string command = "-i " + source_video_path + " -preset " + this.audio_speed_combobox.Text + " " + target_file_name_and_path;
            Console.WriteLine(command);

            Process proc = new Process();
            proc.StartInfo.FileName = "C:/Users/" + Environment.UserName + "/unzipped/ffmpeg-N-103439-ge07ada3dac-win64-gpl/bin/ffmpeg.exe";
            proc.StartInfo.Arguments = command;
            proc.StartInfo.RedirectStandardError = true;
            proc.StartInfo.UseShellExecute = false;
            if (!proc.Start())
            {
                Console.WriteLine("Error starting");
                return;
            }
            StreamReader reader = proc.StandardError;
            string line;
            while ((line = reader.ReadLine()) != null)
            {
                logging_textbox.Text = line;
                Application.DoEvents();
            }
            proc.Close();
        }
    }
}
